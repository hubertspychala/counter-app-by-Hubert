{"version":3,"sources":["Display.js","ButtonsPanel.js","ClockFunctional.js","Step.js","Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Display","props","className","displayValue","ButtonsPanel","onClick","buttonMethod","incStep","ClockFunctional","console","log","useState","Date","date","setDate","useEffect","timerID","setInterval","clearInterval","toLocaleTimeString","toggleClockMethod","Step","InputChange","e","newValue","Number","target","value","setStep","type","min","onChange","this","Component","Counter","changeValue","action","setState","prevState","prevProps","currentCounterValue","counterValue","initValue","stepValue","toggleClock","showClock","setStepsValue","state","clockElement","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b86139b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Display.css\";\r\n\r\nfunction Display(props) {\r\n  return (\r\n    <span className={`value ${props.displayValue <= 4 ? \"blue\" : \"red\"}`}>\r\n      {props.displayValue}\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Display;\r\n","import React from \"react\";\r\nimport \"./ButtonsPanel.css\";\r\n\r\nfunction ButtonsPanel(props) {\r\n  return (\r\n    <div className=\"buttons-panel\">\r\n      <button\r\n        onClick={() => {\r\n          props.buttonMethod(\"add\");\r\n        }}\r\n      >\r\n        Add1\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          props.buttonMethod(\"reinit\");\r\n        }}\r\n      >\r\n        ReInit\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          props.buttonMethod(\"reset\");\r\n        }}\r\n      >\r\n        Reset\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          props.buttonMethod(\"addx\");\r\n        }}\r\n      >\r\n        ZwiÄ™ksz o {props.incStep}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ButtonsPanel;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./ClockFunctional.css\";\r\n\r\nconst ClockFunctional = (props) => {\r\n  console.log(`Initialization lifeCycle: setting state [date, setDate]`);\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const tick = () => setDate(new Date());\r\n\r\n  useEffect(() => {\r\n    let timerID = setInterval(() => {\r\n      tick();\r\n    }, 1000);\r\n    console.log(\r\n      `Mounting && Updating lifeCycle: componentDiDMount() && componentDidUpdate()`\r\n    );\r\n\r\n    return () => {\r\n      clearInterval(timerID);\r\n      console.log(`Unmounting lifeCycle: componentWillUnmount()`);\r\n    };\r\n  }, [date]);\r\n\r\n  return (\r\n    <div className=\"clock\">\r\n      <h4>\r\n        Time: {date.toLocaleTimeString()}\r\n        <span onClick={props.toggleClockMethod}> X</span>\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClockFunctional;\r\n","import { Component } from \"react\";\r\nimport \"./Step.css\";\r\n\r\nclass Step extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  InputChange = (e) => {\r\n    let newValue = Number(e.target.value);\r\n    this.props.setStep(newValue);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"step\">\r\n        <span>Krok:</span>\r\n        <input type=\"number\" min=\"1\" onChange={this.InputChange} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Step;\r\n","import React, { Component } from \"react\";\r\nimport \"./Counter.css\";\r\nimport Display from \"./Display\";\r\nimport ButtonsPanel from \"./ButtonsPanel\";\r\n// import Clock from \"./Clock\";\r\nimport ClockFunctional from \"./ClockFunctional\";\r\nimport Step from \"./Step\";\r\n\r\n// -------------\r\n//KOMPONENT KLASOWY\r\n//--------------\r\n\r\nclass Counter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      counterValue: this.props.initValue,\r\n      showClock: true,\r\n      stepValue: 1,\r\n    };\r\n  }\r\n\r\n  changeValue = (action) => {\r\n    this.setState((prevState, prevProps) => {\r\n      let currentCounterValue = prevState.counterValue;\r\n\r\n      if (action === \"add\") {\r\n        currentCounterValue += 1;\r\n      } else if (action === \"reinit\") {\r\n        currentCounterValue = prevProps.initValue;\r\n      } else if (action === \"addx\") {\r\n        currentCounterValue += prevState.stepValue;\r\n      } else {\r\n        currentCounterValue = 0;\r\n      }\r\n      return { counterValue: currentCounterValue };\r\n    });\r\n  };\r\n\r\n  toggleClock = () => {\r\n    this.setState((prevState) => {\r\n      return {\r\n        showClock: !prevState.showClock,\r\n      };\r\n    });\r\n  };\r\n\r\n  setStepsValue = (value) => {\r\n    console.log(\"+++++++++++++++ \" + value);\r\n    this.setState({ stepValue: value });\r\n  };\r\n\r\n  render() {\r\n    let clockElement = \"\";\r\n\r\n    if (this.state.showClock) {\r\n      // clockElement = <Clock toggleClockMethod={this.toggleClock} />;\r\n      clockElement = <ClockFunctional toggleClockMethod={this.toggleClock} />;\r\n    } else {\r\n      clockElement = (\r\n        <span onClick={this.toggleClock} className=\"show-clock\">\r\n          show clock\r\n        </span>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"counter\">\r\n        Counter:\r\n        <Display displayValue={this.state.counterValue} />\r\n        <ButtonsPanel\r\n          buttonMethod={this.changeValue}\r\n          incStep={this.state.stepValue}\r\n        />\r\n        <Step setStep={this.setStepsValue} />\r\n        {clockElement}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Counter;\r\nconsole.log();\r\n\r\n//--------------------\r\n// KOMPONENT FUNKCYJNY\r\n// ------------------\r\n// function Counter(props) {\r\n//   let randomNumber = Math.floor(Math.random() * (108 - 1 + 1) + 1);\r\n//   return (\r\n//     <div className=\"counter\">\r\n//       Counter:\r\n//       <span className=\"value\">{props.initValue}</span>\r\n//     </div>\r\n//   );\r\n// }\r\n// export default Counter;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Counter from \"./Counter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Counter App V2</h1>\n      </header>\n      <Counter initValue={0} />\n      <Counter initValue={108} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}